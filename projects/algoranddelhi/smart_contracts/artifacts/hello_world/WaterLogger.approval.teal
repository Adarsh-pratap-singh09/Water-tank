#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    bytecblock "totalIntake"
    txn ApplicationID
    bnz main_after_if_else@2
    // smart_contracts/hello_world/contract.algo.ts:5
    // totalIntake = GlobalState<uint64>({ key: "totalIntake", initialValue: 0 })
    bytec_0 // "totalIntake"
    intc_0 // 0
    app_global_put

main_after_if_else@2:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class WaterLogger extends Contract {
    txn NumAppArgs
    bz main_bare_routing@9
    pushbytess 0x56d14903 0xc8fb5ba1 // method "logIntake(uint64)uint64", method "resetIntake()void"
    txna ApplicationArgs 0
    match main_logIntake_route@5 main_resetIntake_route@6

main_after_if_else@13:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class WaterLogger extends Contract {
    intc_0 // 0
    return

main_resetIntake_route@6:
    // smart_contracts/hello_world/contract.algo.ts:17
    // resetIntake(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub resetIntake
    intc_1 // 1
    return

main_logIntake_route@5:
    // smart_contracts/hello_world/contract.algo.ts:8
    // logIntake(amount: uint64): uint64 {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class WaterLogger extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/hello_world/contract.algo.ts:8
    // logIntake(amount: uint64): uint64 {
    callsub logIntake
    itob
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_bare_routing@9:
    // smart_contracts/hello_world/contract.algo.ts:3
    // export class WaterLogger extends Contract {
    txn OnCompletion
    bnz main_after_if_else@13
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/hello_world/contract.algo.ts::WaterLogger.logIntake(amount: uint64) -> uint64:
logIntake:
    // smart_contracts/hello_world/contract.algo.ts:8
    // logIntake(amount: uint64): uint64 {
    proto 1 1
    // smart_contracts/hello_world/contract.algo.ts:5
    // totalIntake = GlobalState<uint64>({ key: "totalIntake", initialValue: 0 })
    intc_0 // 0
    bytec_0 // "totalIntake"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:10
    // this.totalIntake.value = this.totalIntake.value + amount
    frame_dig -1
    +
    // smart_contracts/hello_world/contract.algo.ts:5
    // totalIntake = GlobalState<uint64>({ key: "totalIntake", initialValue: 0 })
    bytec_0 // "totalIntake"
    // smart_contracts/hello_world/contract.algo.ts:10
    // this.totalIntake.value = this.totalIntake.value + amount
    swap
    app_global_put
    // smart_contracts/hello_world/contract.algo.ts:5
    // totalIntake = GlobalState<uint64>({ key: "totalIntake", initialValue: 0 })
    intc_0 // 0
    bytec_0 // "totalIntake"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/hello_world/contract.algo.ts:13
    // return this.totalIntake.value
    retsub


// smart_contracts/hello_world/contract.algo.ts::WaterLogger.resetIntake() -> void:
resetIntake:
    // smart_contracts/hello_world/contract.algo.ts:5
    // totalIntake = GlobalState<uint64>({ key: "totalIntake", initialValue: 0 })
    bytec_0 // "totalIntake"
    // smart_contracts/hello_world/contract.algo.ts:18
    // this.totalIntake.value = 0
    intc_0 // 0
    app_global_put
    retsub
